// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id         String         @id @default(cuid())
  sellerId   String         @unique
  nickname   String?
  siteId     String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  tokens     AccountToken[]
  items      Item[]
  orders     Order[]
  shipments  Shipment[]
  questions  Question[]
}

model AccountToken {
  id           String   @id @default(cuid())
  accountId    String
  accessToken  String
  refreshToken String
  tokenType    String?
  scope        String?
  expiresIn    Int
  obtainedAt   DateTime @default(now())

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
}

model Item {
  id          String   @id @default(cuid())
  accountId   String
  meliItemId  String   @unique
  title       String
  status      String
  price       Float
  available   Int
  sold        Int      @default(0)
  thumbnail   String?
  picture     String?  // Imagem em alta resolução
  permalink   String?  // Link do anúncio no ML
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
}

model Order {
  id            String   @id @default(cuid())
  accountId     String
  meliOrderId   String   @unique
  status        String
  totalAmount   Float
  dateCreated   DateTime
  buyerId       String?
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([dateCreated])
}

model Shipment {
  id              String   @id @default(cuid())
  accountId       String
  meliShipmentId  String   @unique
  orderId         String?  // Relacionamento com Order
  mode            String   // me2, me1, custom, etc.
  status          String   // pending, ready_to_ship, shipped, delivered, etc.
  substatus       String?
  trackingNumber  String?
  trackingMethod  String?
  estimatedDelivery DateTime?
  shippedDate     DateTime?
  deliveredDate   DateTime?
  receiverAddress String?  // JSON com endereço completo
  senderAddress   String?  // JSON com endereço completo
  cost            Float?
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([orderId])
  @@index([status])
}

model Question {
  id             String   @id @default(cuid())
  accountId      String
  meliQuestionId String   @unique
  itemId         String?  // Relacionamento com Item
  text           String
  status         String   // UNANSWERED, ANSWERED, CLOSED_UNANSWERED, UNDER_REVIEW, BANNED, DELETED
  answer         String?
  dateCreated    DateTime
  dateAnswered   DateTime?
  fromId         String   // ID do comprador
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([itemId])
  @@index([status])
  @@index([dateCreated])
}

model WebhookEvent {
  id          String   @id @default(cuid())
  eventId     String   @unique // _id do webhook do ML
  topic       String   // orders, items, questions, etc.
  resource    String   // URL do recurso
  userId      String   // seller_id
  payload     Json     // payload completo
  processed   Boolean  @default(false)
  receivedAt  DateTime @default(now())
  processedAt DateTime?

  @@index([topic])
  @@index([processed])
  @@index([userId])
  @@index([receivedAt])
}

model Settings {
  id        String   @id @default(cuid())
  accountId String   @unique
  
  // Sincronização
  syncInterval       Int      @default(30) // minutos
  syncItems          Boolean  @default(true)
  syncOrders         Boolean  @default(true)
  syncQuestions      Boolean  @default(true)
  syncHistoryDays    Int      @default(30)
  
  // Notificações
  notificationsEnabled       Boolean @default(true)
  notifyNewQuestions         Boolean @default(true)
  notifyNewOrders            Boolean @default(true)
  notifyLowStock             Boolean @default(true)
  notifyQuestionsSLA         Boolean @default(true)
  
  // Preferências
  theme              String   @default("system") // light, dark, system
  language           String   @default("pt-BR")
  timezone           String   @default("America/Sao_Paulo")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@index([accountId])
}
